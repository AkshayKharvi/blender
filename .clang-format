# Copyright 2017 Blender Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.  You may obtain a copy
# of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations under
# the License.
#
# Clang-format for Blender, as describe in the Blender style guide:
# https://wiki.blender.org/index.php/Dev:Doc/Code_Style
#
# NOTE: Not all Blender style rules are currently supported properly! Take care
# when using this (see below for details).
#
# To apply clang-format to a file, run
#
#   clang-format -i foo.cpp
#
# This will update the file in place.
#
# To run on all files on a UNIX system, run
#
#   ./clang-format-migration.sh
#
# NOTE: At time of writing (10/30/2017) not all formatting can be made exactly
# like current Blender sources, so a few compromises are made:
#
#   1. Newline after : in switch statements: clang-format will put the { on
#      the same line. This is due to a limitation in clang-format; it does not
#      support adding the newline after cases in switch statements.
#   2. Nested preprocessor directives don't get proper indentation after the
#      '#'. See IndentPPDirectives, which is supported in clang-format from
#      LLVM6, but not LLVM5. It is included below but commented out.
#   3. Special case of { position on if statements where the condition covers
#      more than one line. clang-format is an all or nothing formatter in this
#      case; so unfortunately the case of
#
#      if (long_condition_here() ||
#          long_condition_here() ||
#          long_condition_here() ||
#          long_condition_here())
#      {
#          ...
#      }
#
#      will become
#
#      if (long_condition_here() ||
#          long_condition_here() ||
#          long_condition_here() ||
#          long_condition_here()) {
#          ...
#      }
#

# Configuration of clang-format
# =============================

# This causes parameters on continuations to stack after the open brace,
# wrapped and indented at a fixed width.
#
#   like_this_long_name(
#       parameter_one,
#       parameter_two,
#       parameter_three);
#
AlignAfterOpenBracket: 'AlwaysBreak'

# Disallow short functions on one line; break them up.
AllowShortBlocksOnASingleLine: false

# These two settings trigger stacking of parameters in most cases; this is
# easier to read and also makes diffs easier to read (since an added or removed
# parameter is obvious). For example, function calls will look like this:
#
#   like_this_long_name(
#       parameter_one,
#       parameter_two,
#       parameter_three,
#       parameter_four,
#       parameter_five,
#       parameter_six);
#
# instead of this
#
#   like_this_long_name(
#       parameter_one, parameter_two, parameter_three, parameter_four,
#       parameter_five, parameter_six);
#
BinPackArguments: false
BinPackParameters: false

# Line width (don't exceed 100).
ColumnLimit: 99

# Cause initializer lists to have one member initialized per line, in the case
# that all initializers can't fit on a single line.
ConstructorInitializerAllOnOneLineOrOnePerLine: true

# Don't indent the : after a constructor. For example:
#
#   explicit foo_class ()
#   : member1_(5)
#   {
#   }
#
ConstructorInitializerIndentWidth: 0

# This will unfortunately use spaces in some cases where it's not desired (like
# function calls) but the overall result is better since it will allow
# alignment to work properly with different tab width settings.
ContinuationIndentWidth: 2

# This tries to match Blender's style as much as possible. One
BreakBeforeBraces: Custom
BraceWrapping: {
    AfterClass: 'true'
    AfterControlStatement: 'false'
    AfterEnum : 'false'
    AfterFunction : 'true'
    AfterNamespace : 'false'
    AfterStruct : 'false'
    AfterUnion : 'false'
    BeforeCatch : 'true'
    BeforeElse : 'true'
    IndentBraces : 'false'
}

# For switch statements, indent the cases.
IndentCaseLabels: true

# Indent after the hash inside preprocessor directives
IndentPPDirectives: AfterHash

BreakBeforeTernaryOperators: false

SpaceAfterTemplateKeyword: false

# Handy comment at the end of each C++ name space.
FixNamespaceComments: true

# Use "if (...)" instead of "if(...)", but have function calls like foo().
SpaceBeforeParens: ControlStatements
SpaceInEmptyParentheses: false

# Use two spaces before trailing comments, for example
#
#   foo = bar;  /* comment */
#
SpacesBeforeTrailingComments: 2

# Don't reflow comments, let developers define line breaks.
# Enabling breaks some ascii art.
ReflowComments: false

# Never use tabs for indentation.
# Note: TabWidth and IndentWidth must be the same, or strange things happen.
UseTab: Never
TabWidth: 2
IndentWidth: 2

# Add a big penalty on breaking after the return type of functions. For example,
#
#   static void foo(...)
#
# instead of
#
#   static void
#   foo(very long content here that maybe could be stacked)
#
PenaltyReturnTypeOnItsOwnLine: 10000

AllowShortFunctionsOnASingleLine: None

# Disable for now since it complicates initial migration tests,
# TODO: look into enabling this in the future.
SortIncludes: false


# There are macros in Blender for custom for loops; tell Clang to treat them
# like loops rather than an expression, and so put the { on the same line.
ForEachMacros:
  - BLI_SMALLSTACK_ITER_BEGIN
  - BMO_ITER
  - BM_FACES_OF_VERT_ITER_BEGIN
  - BM_ITER_ELEM
  - BM_ITER_MESH
  - BM_ITER_MESH_MUTABLE
  - BM_LOOPS_OF_VERT_ITER_BEGIN
  - CTX_DATA_BEGIN
  - DEG_OBJECT_ITER_BEGIN
  - DEG_OBJECT_ITER_FOR_RENDER_ENGINE_BEGIN
  - DRIVER_TARGETS_LOOPER_BEGIN
  - DRIVER_TARGETS_USED_LOOPER_BEGIN
  - FAKE_SELECT_MODE_BEGIN
  - FOREACH_BASE_IN_EDIT_MODE_BEGIN
  - FOREACH_BASE_IN_MODE_BEGIN
  - FOREACH_BEGIN
  - FOREACH_COLLECTION_OBJECT_RECURSIVE_BEGIN
  - FOREACH_COLLECTION_VISIBLE_OBJECT_RECURSIVE_BEGIN
  - FOREACH_EDIT_OBJECT_BEGIN
  - FOREACH_NODETREE_BEGIN
  - FOREACH_OBJECT_BEGIN
  - FOREACH_OBJECT_FLAG_BEGIN
  - FOREACH_OBJECT_IN_EDIT_MODE_BEGIN
  - FOREACH_OBJECT_IN_MODE_BEGIN
  - FOREACH_OBJECT_RENDERABLE_BEGIN
  - FOREACH_PCHAN_SELECTED_IN_OBJECT_BEGIN
  - FOREACH_PCHAN_VISIBLE_IN_OBJECT_BEGIN
  - FOREACH_SCENE_COLLECTION_BEGIN
  - FOREACH_SCENE_OBJECT_BEGIN
  - FOREACH_SELECTED_BASE_BEGIN
  - FOREACH_SELECTED_EDITABLE_OBJECT_BEGIN
  - FOREACH_SELECTED_OBJECT_BEGIN
  - FOREACH_VIEW_LAYER_TO_RENDER_BEGIN
  - FOREACH_VISIBLE_BASE_BEGIN
  - FOREACH_VISIBLE_OBJECT_BEGIN
  - GHASH_FOREACH_BEGIN
  - GP_EDITABLE_STROKES_BEGIN
  - GSET_FOREACH_BEGIN
  - ITER_BEGIN
  - LISTBASE_CIRCULAR_BACKWARD_BEGIN
  - LISTBASE_CIRCULAR_FORWARD_BEGIN
  - LISTBASE_FOREACH
  - MAN2D_ITER_AXES_BEGIN
  - MAN_ITER_AXES_BEGIN
  - NODE_SOCKET_TYPES_BEGIN
  - NODE_TREE_TYPES_BEGIN
  - NODE_TYPES_BEGIN
  - PIXEL_LOOPER_BEGIN
  - RNA_BEGIN
  - RNA_PROP_BEGIN
  - RNA_STRUCT_BEGIN
  - SEQP_BEGIN
  - SEQ_BEGIN
  - foreach
